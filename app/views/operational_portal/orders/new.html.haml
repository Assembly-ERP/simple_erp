/ app/views/operational_portal/orders/new.html.erb
.container
  %h1 New Order
  - if flash[:alert]
    .alert.alert-danger
      = flash[:alert]
  = form_with(model: @order, local: true, url: operational_portal_orders_path) do |form|
    - if @order.errors.any?
      #error_explanation
        %h2
          = pluralize(@order.errors.count, "error")
          prohibited this order from being saved:
        %ul
          - @order.errors.full_messages.each do |message|
            %li= message
    #customer_selection
      = form.label :customer_id, "Select Customer", for: "order_customer_id"
      = form.collection_select :customer_id, @customers, :id, :name, { prompt: 'Select Customer' }, { class: 'form-control', id: 'order_customer_id' }
    #customer_display{:style => "display: none;"}
      %strong Customer:
      %span#customer_name
      %button#view_customer.btn.btn-secondary.btn-sm View Details
    #added-items-summary
      Added Items:
      %span#added-items-count 0
      %button#preview-items-btn.btn.btn-primary{:type => "button"} Preview
    %h2 Add Items to Order
    .field
      = label_tag :item_search, "Search Parts or Products:"
      = text_field_tag :item_search, nil, placeholder: "Start typing to search...", autocomplete: "off", disabled: "true"
      #search-suggestions
    %div
      %label{:for => "filter"} Filter By
      = select_tag :filter, options_for_select([['Parts', 'parts'], ['Products', 'products']]), id: 'filter'
    #search-results{:style => "display: none;"}
      %h3 Search Results
      %table
        %thead
          %tr
            %th Name
            %th Type
            %th Weight
            %th Price
            %th Stock
            %th Quantity
            %th Action
        %tbody#search-results-body
    #selected-items{:style => "display: none;"}
      %h3 Selected Items
      %ul#order-items-list
    %div
      = form.submit "Create Order", class: "btn btn-primary", id: "create_order_btn", disabled: true
  = link_to 'Back', operational_portal_catalog_path, class: "btn btn-secondary"
/ Add this modal for customer details
#customer-details-modal.modal{:style => "display: none;"}
  .modal-content
    %span.close ×
    %h2#modal-customer-name
    %p#modal-customer-address
    %p#modal-customer-phone
    %p#modal-customer-street
    %p#modal-customer-city
    %p#modal-customer-state
    %p#modal-customer-postal-code
    %p#modal-customer-discount
/ Modal for item details
#item-details-modal.modal{:style => "display: none;"}
  .modal-content
    %span.close ×
    %h2#modal-item-name
    %p#modal-item-description
    %p#modal-item-price
    %p#modal-item-weight
/ Modal for previewing added items
#preview-items-modal.modal{:style => "display: none;"}
  .modal-content
    %span.close ×
    %h2 Added Items Preview
    %table
      %thead
        %tr
          %th Name
          %th Type
          %th Price
          %th Quantity
          %th Total
      %tbody#preview-items-body
    %p
      Total Order Value: $
      %span#total-order-value
:javascript
  document.addEventListener('DOMContentLoaded', function() {
    const customerSelect = document.getElementById('order_customer_id');
    const customerSelectionDiv = document.getElementById('customer_selection');
    const customerDisplayDiv = document.getElementById('customer_display');
    const customerNameSpan = document.getElementById('customer_name');
    const viewCustomerBtn = document.getElementById('view_customer');
    const customerDetailsModal = document.getElementById('customer-details-modal');
    const searchInput = document.getElementById('item_search');
    const createOrderBtn = document.getElementById('create_order_btn');
    const suggestionsContainer = document.getElementById('search-suggestions');
    const searchResultsContainer = document.getElementById('search-results');
    const searchResultsBody = document.getElementById('search-results-body');
    const orderItemsList = document.getElementById('order-items-list');
    const addedItemsCount = document.getElementById('added-items-count');
    const previewItemsBtn = document.getElementById('preview-items-btn');
    const previewItemsModal = document.getElementById('preview-items-modal');
    const previewItemsBody = document.getElementById('preview-items-body');
    const totalOrderValue = document.getElementById('total-order-value');
    const itemDetailsModal = document.getElementById('item-details-modal');
    const modalCloses = document.querySelectorAll('.modal .close');
  
    let customerSelected = false;
    let addedItems = [];
  
    updateCreateOrderButton();
  
    // Initially disable the search input and create order button
    searchInput.disabled = true;
    createOrderBtn.disabled = true;
  
    customerSelect.addEventListener('change', function() {
      const selectedCustomer = this.options[this.selectedIndex];
      if (selectedCustomer.value !== '') {
        customerSelected = true;
        searchInput.disabled = false;
        createOrderBtn.disabled = false;
        
        console.log('Customer selected:', selectedCustomer.text);
        console.log('Search input enabled:', !searchInput.disabled);
  
        fetchCustomerDetails(selectedCustomer.value);
      } else {
        customerSelected = false;
        searchInput.disabled = true;
        createOrderBtn.disabled = true;
      }
    });
  
    viewCustomerBtn.addEventListener('click', showCustomerDetailsModal);
  
    searchInput.addEventListener('input', function() {
      const query = this.value;
      if (query.length > 2) {
        fetchSuggestions(query);
      } else {
        suggestionsContainer.innerHTML = '';
      }
    });
  
    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter' && customerSelected) {
        e.preventDefault();
        const query = this.value;
        if (query.length > 2) {
          suggestionsContainer.innerHTML = ''; // Clear suggestions
          fetchSearchResults(query);
        }
      }
    });
  
    previewItemsBtn.addEventListener('click', showPreviewModal);
  
    modalCloses.forEach(close => {
      close.onclick = function() {
        close.closest('.modal').style.display = "none";
      }
    });
  
    window.onclick = function(event) {
      if (event.target.classList.contains('modal')) {
        event.target.style.display = "none";
      }
    }
  
    function updateCreateOrderButton() {
    const createOrderBtn = document.getElementById('create_order_btn');
    createOrderBtn.disabled = addedItems.length === 0;
  }
  
    function fetchCustomerDetails(customerId) {
      fetch(`/operational_portal/customers/${customerId}/details`)
        .then(response => response.json())
        .then(customer => {
          customerDetailsModal.dataset.customerDetails = JSON.stringify(customer);
          console.log('Customer details fetched:', customer);
        })
        .catch(error => console.error('Error fetching customer details:', error));
    }
  
    function showCustomerDetailsModal() {
      const customerDetails = JSON.parse(customerDetailsModal.dataset.customerDetails);
      document.getElementById('modal-customer-name').textContent = customerDetails.name;
      document.getElementById('modal-customer-address').textContent = `Address: ${customerDetails.address}`;
      document.getElementById('modal-customer-phone').textContent = `Phone: ${customerDetails.phone}`;
      document.getElementById('modal-customer-street').textContent = `Street: ${customerDetails.street}`;
      document.getElementById('modal-customer-city').textContent = `City: ${customerDetails.city}`;
      document.getElementById('modal-customer-state').textContent = `State: ${customerDetails.state}`;
      document.getElementById('modal-customer-postal-code').textContent = `Postal Code: ${customerDetails.postal_code}`;
      document.getElementById('modal-customer-discount').textContent = `Discount: ${customerDetails.discount}%`;
      customerDetailsModal.style.display = 'block';
    }
  
    function fetchSuggestions(query) {
      if (!customerSelected) return;
  
      fetch(`/operational_portal/orders/search_items?query=${encodeURIComponent(query)}`)
        .then(response => response.json())
        .then(data => {
          suggestionsContainer.innerHTML = '';
          data.forEach(item => {
            const div = document.createElement('div');
            div.textContent = `${item.name} (${item.type})`;
            div.addEventListener('click', () => {
              searchInput.value = item.name;
              suggestionsContainer.innerHTML = '';
              fetchSearchResults(item.name);
            });
            suggestionsContainer.appendChild(div);
          });
        });
    }
  
    function fetchSearchResults(query) {
    if (!customerSelected) return;
  
    searchInput.disabled = true;
    searchResultsContainer.style.display = 'none';
    
    const loadingIndicator = document.createElement('div');
    loadingIndicator.textContent = 'Loading...';
    loadingIndicator.id = 'loading-indicator';
    searchResultsContainer.parentNode.insertBefore(loadingIndicator, searchResultsContainer);
  
    fetch(`/operational_portal/orders/search_items?query=${encodeURIComponent(query)}`)
      .then(response => response.json())
      .then(data => {
        searchResultsBody.innerHTML = '';
        data.forEach((item, index) => {
          const existingItem = addedItems.find(i => i.id === item.id && i.type === item.type);
          const row = searchResultsBody.insertRow();
          row.dataset.id = item.id;
          row.dataset.type = item.type;
          row.innerHTML = `
            <td>${item.name}</td>
            <td>${item.type}</td>
            <td>${item.weight ? item.weight + ' lbs' : 'N/A'}</td>
            <td>$${item.price}</td>
            <td>${item.in_stock !== undefined ? item.in_stock : 'N/A'}</td>
            <td><input type="number" min="0" value="${existingItem ? existingItem.quantity : 1}" class="item-quantity" id="quantity-${item.id}-${item.type}" name="quantity-${item.id}-${item.type}"></td>
            <td>
              <button type="button" class="details-btn btn btn-secondary">Details</button>
              <button type="button" class="add-btn btn ${existingItem ? 'btn-secondary' : 'btn-primary'}">${existingItem ? 'Update' : 'Add'}</button>
            </td>
          `;
          const detailsBtn = row.querySelector('.details-btn');
          const addBtn = row.querySelector('.add-btn');
          const quantityInput = row.querySelector('.item-quantity');
          
          detailsBtn.addEventListener('click', () => showItemDetails(item));
          addBtn.addEventListener('click', (event) => {
            const quantity = quantityInput.value;
            addItemToOrder(item, quantity, event.target);
          });
        });
      })
      .catch(error => {
        console.error('Error:', error);
        searchResultsBody.innerHTML = '<tr><td colspan="7">An error occurred while fetching results.</td></tr>';
      })
      .finally(() => {
        const loadingIndicator = document.getElementById('loading-indicator');
        if (loadingIndicator) loadingIndicator.remove();
        searchResultsContainer.style.display = 'block';
        searchInput.disabled = false;
      });
  }
  
    function addItemToOrder(item, quantity, addBtn) {
    console.log('Adding/Updating item in order:', item, quantity);
    if (!customerSelected) {
      alert('Please select a customer before adding items to the order.');
      return;
    }
  
    const parsedQuantity = parseInt(quantity, 10);
    const existingItemIndex = addedItems.findIndex(i => i.id === item.id && i.type === item.type);
    
    if (parsedQuantity === 0) {
      // Remove item if quantity is 0
      if (existingItemIndex !== -1) {
        addedItems.splice(existingItemIndex, 1);
      }
      // Revert button to "Add"
      if (addBtn) {
        addBtn.textContent = 'Add';
        addBtn.classList.remove('btn-secondary');
        addBtn.classList.add('btn-primary');
      }
    } else {
      if (existingItemIndex !== -1) {
        // Update existing item
        addedItems[existingItemIndex].quantity = parsedQuantity;
      } else {
        // Add new item
        addedItems.push({...item, quantity: parsedQuantity});
      }
      // Update button to "Update"
      if (addBtn) {
        addBtn.textContent = 'Update';
        addBtn.classList.remove('btn-primary');
        addBtn.classList.add('btn-secondary');
      }
    }
  
    try {
      updateAddedItemsCount();
      updateOrderItemsContainer();
      updateCreateOrderButton();
  
      console.log('Added items length:', addedItems.length);
      // Change customer selector to display after first item is added
      if (addedItems.length === 1) {
        console.log('First item added, changing customer display');
        const selectedCustomer = customerSelect.options[customerSelect.selectedIndex];
        customerNameSpan.textContent = selectedCustomer.text;
        customerSelectionDiv.style.display = 'none';
        customerDisplayDiv.style.display = 'block';
        // customerSelect.disabled = true;
      } else if (addedItems.length === 0) {
        // If all items are removed, revert to customer selection
        console.log('All items removed, reverting to customer selection');
        customerSelectionDiv.style.display = 'block';
        customerDisplayDiv.style.display = 'none';
        // customerSelect.disabled = false;
      }
  
      if (addBtn) {
        console.log('Button updated:', addBtn);
      } else {
        console.warn('Add button not found');
      }
    } catch (error) {
      console.error('Error in addItemToOrder:', error);
    }
  }
  
  function removeItemFromOrder(item) {
  
    updateAddedItemsCount();
    updateOrderItemsContainer();
    updateCreateOrderButton(); // Add this line
  }
  
    function updateAddedItemsCount() {
      const totalItems = addedItems.reduce((sum, item) => sum + item.quantity, 0);
      addedItemsCount.textContent = totalItems;
    }
  
    function updateOrderItemsContainer() {
    const orderItemsList = document.getElementById('order-items-list');
    if (!orderItemsList) {
      console.error('Order items list not found');
      return;
    }
    
    orderItemsList.innerHTML = addedItems.map((item, index) => `
      <li>
        ${item.name} (${item.type}) - Quantity: ${item.quantity}
        <input type="hidden" name="order[order_details_attributes][${index}][${item.type === 'part' ? 'part_id' : 'product_id'}]" value="${item.id}">
        <input type="hidden" name="order[order_details_attributes][${index}][quantity]" value="${item.quantity}">
      </li>
    `).join('');
  
   }
  
    function showPreviewModal() {
      if (!customerSelected) {
        alert('Please select a customer before previewing the order.');
        return;
      }
  
      previewItemsBody.innerHTML = addedItems.map(item => `
        <tr>
          <td>${item.name}</td>
          <td>${item.type}</td>
          <td>$${item.price}</td>
          <td>${item.quantity}</td>
          <td>$${(item.price * item.quantity).toFixed(2)}</td>
        </tr>
      `).join('');
  
      const total = addedItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
      totalOrderValue.textContent = total.toFixed(2);
  
      previewItemsModal.style.display = "block";
    }
  
    function showItemDetails(item) {
      document.getElementById('modal-item-name').textContent = item.name;
      document.getElementById('modal-item-description').textContent = `Description: ${item.description}`;
      document.getElementById('modal-item-price').textContent = `Price: $${item.price}`;
      document.getElementById('modal-item-weight').textContent = item.weight ? `Weight: ${item.weight} lbs` : 'Weight: N/A';
      itemDetailsModal.style.display = "block";
    }
  });
